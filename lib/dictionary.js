// Generated by CoffeeScript 1.3.3
(function() {
  var $, Dictionary, Module, exports, moduleKeywords, youDaoModule,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  moduleKeywords = ['extended', 'included'];

  Module = (function() {

    function Module() {}

    Module.include = function(obj) {
      var key, value, _ref;
      for (key in obj) {
        value = obj[key];
        if (__indexOf.call(moduleKeywords, key) < 0) {
          this.prototype[key] = value;
        }
      }
      if ((_ref = obj.included) != null) {
        _ref.apply(this);
      }
      return this;
    };

    return Module;

  })();

  youDaoModule = {
    translate: function(word) {
      var url, _ref;
      url = "http://fanyi.youdao.com/openapi.do?keyfrom=" + this.options.keyfrom + "&key=" + this.options.key + "&type=data&doctype=jsonp&callback=?&version=1.1&q=" + word;
      this.options.url = url;
      this.options.async = true;
      this.options.dataType = (_ref = this.options.dataType) != null ? _ref : 'json';
      return $.ajax(this.options);
    }
  };

  Dictionary = (function(_super) {

    __extends(Dictionary, _super);

    function Dictionary(name, options) {
      this.name = name;
      this.options = options != null ? options : {};
      if (this.name === 'youdao') {
        Dictionary.include(youDaoModule);
      }
    }

    Dictionary.prototype.t = function(word) {
      return this.translate(word);
    };

    return Dictionary;

  })(Module);

  $ = (typeof window !== "undefined" && window !== null ? window.jQuery : void 0) || (typeof window !== "undefined" && window !== null ? window.Zepto : void 0) || function(element) {
    return element;
  };

  $.fn.extend({
    dict: function(name, options) {
      var getSelectWord, settings,
        _this = this;
      this.defaultSettings = {
        doubleclick: true,
        loadingContainer: '#beforeTranslation',
        successContainer: '#translateSuccessful'
      };
      settings = $.extend({}, this.defaultSettings, options);
      getSelectWord = function() {
        var marker, markerEl, markerId, range, word;
        word = '';
        markerId = "sel_" + (new Date().getTime()) + "_" + (Math.random().toString().substr(2));
        if (document.selection && document.selection.createRange) {
          word = document.selection.createRange().text;
          range = document.selection.createRange().duplicate();
          range.collapse(false);
          range.pasteHTML("<span id='" + markerId + "' style='position: relative;'>&#xfeff;</span>");
        } else if (window.getSelection) {
          word = window.getSelection();
          range = word.getRangeAt(0).cloneRange();
          range.collapse(false);
          markerEl = document.createElement("span");
          markerEl.id = markerId;
          markerEl.appendChild(document.createTextNode("\ufeff"));
          range.insertNode(markerEl);
        }
        marker = document.getElementById(markerId);
        return {
          word: word.toString,
          top: marker.offsetTop,
          left: marker.offsetLeft
        };
      };
      $('body').children().not('.dictMain').mousedown(function() {
        return $('.dictMain').hide();
      });
      this.each(function(index, element) {
        var dict;
        dict = new Dictionary(name, settings);
        return $(_this).mouseup(function(e) {
          var $container, left, offset, onSuccess, status, top, word, _ref;
          word = getSelectWord;
          if (word.replace(/\s/g, "") === "") {
            return;
          }
          status = true;
          if (typeof settings.beforeTranslation === 'function') {
            status = settings.beforeTranslation.call(this);
          }
          if (status) {
            offset = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
            left = e.pageX;
            if (settings.left != null) {
              left += settings.left;
            }
            top = e.pageY - 40 < 0 ? e.pageY + offset + 10 : e.pageY + offset + 20;
            if (settings.top != null) {
              top += settings.top;
            }
            if (settings.loadingContainer) {
              $container = $(settings.loadingContainer).addClass('dictMain');
              $container.css('left', left).css('top', top).css('position', 'absolute');
              $container.show();
            }
            onSuccess = (_ref = settings.onSuccess) != null ? _ref : function(result) {
              var data, phonetic;
              $container = $(settings.successContainer).addClass('dictMain');
              $container.css('left', left).css('top', top).css('position', 'absolute');
              $("" + settings.successContainer + " #word").text(word);
              if (result.basic != null) {
                phonetic = result.basic.phonetic;
                data = result.basic.explains;
              } else {
                data = result.translation;
              }
              if (phonetic != null) {
                $("" + settings.successContainer + " #phonetic").text(phonetic);
              } else {
                $("" + settings.successContainer + " #phonetic").hide();
              }
              if (data != null) {
                $("" + settings.successContainer + " #explains").empty();
                $.each(data, function(index, value) {
                  return $("" + settings.successContainer + " #explains").append("<p>" + value + "</p>");
                });
              } else {
                $("" + settings.successContainer + " #explains").empty().hide();
              }
              $('.dictMain').hide();
              return $container.show();
            };
            return dict.translate(word, onSuccess, settings.onFailure);
          }
        });
      });
      return this;
    }
  });

  exports = this;

  exports.Dictionary = Dictionary;

}).call(this);
