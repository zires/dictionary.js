// Generated by CoffeeScript 1.3.3
(function() {
  var $, Dictionary, Module, exports, moduleKeywords, youDaoModule,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  moduleKeywords = ['extended', 'included'];

  Module = (function() {

    function Module() {}

    Module.include = function(obj) {
      var key, value, _ref;
      for (key in obj) {
        value = obj[key];
        if (__indexOf.call(moduleKeywords, key) < 0) {
          this.prototype[key] = value;
        }
      }
      if ((_ref = obj.included) != null) {
        _ref.apply(this);
      }
      return this;
    };

    return Module;

  })();

  youDaoModule = {
    translate: function(word, onSuccess, onFailure) {
      var failureCallback, responseObject, url, xhr;
      if (window.XMLHttpRequest) {
        xhr = new window.XMLHttpRequest();
      } else if (window.ActiveXObject) {
        xhr = new ActiveXObject("Microsoft.XMLHTTP");
      }
      url = "http://fanyi.youdao.com/openapi.do?keyfrom=" + this.options.keyfrom + "&key=" + this.options.key + "&type=data&doctype=json&version=1.1&q=" + word;
      xhr.open('GET', url, onSuccess != null);
      if (onSuccess != null) {
        failureCallback = onFailure != null ? onFailure : function() {};
        xhr.onreadystatechange = function() {
          if (xhr.readyState === 4 && xhr.status === 200) {
            onSuccess(xhr.responseText);
          }
          if (xhr.readyState === 4 && xhr.status !== 200) {
            return failureCallback(xhr.responseText);
          }
        };
      }
      xhr.send(null);
      if (onSuccess == null) {
        if (xhr.status === 200) {
          try {
            responseObject = eval("(" + xhr.responseText + ")");
            if (responseObject.errorCode === 0) {
              return responseObject.translation.join();
            } else {
              return null;
            }
          } catch (error) {
            return null;
          }
        } else {
          return xhr.statusText;
        }
      }
    }
  };

  Dictionary = (function(_super) {

    __extends(Dictionary, _super);

    function Dictionary(name, options) {
      this.name = name;
      this.options = options != null ? options : {};
      if (this.name === 'youdao') {
        Dictionary.include(youDaoModule);
      }
    }

    Dictionary.prototype.t = function(word, onSuccess, onFailure) {
      return this.translate(word, onSuccess, onFailure);
    };

    return Dictionary;

  })(Module);

  $ = (typeof window !== "undefined" && window !== null ? window.jQuery : void 0) || (typeof window !== "undefined" && window !== null ? window.Zepto : void 0) || function(element) {
    return element;
  };

  $.fn.extend({
    dict: function(name, options) {
      var getSelectWord, settings,
        _this = this;
      this.defaultSettings = {
        doubleclick: true,
        loadingContainer: '#beforeTranslation',
        successContainer: '#translateSuccessful',
        onFailure: function() {}
      };
      settings = $.extend({}, this.defaultSettings, options);
      getSelectWord = function(doc) {
        var word;
        word = '';
        if (window.getSelection) {
          word = window.getSelection();
        }
        if (doc.getSelection) {
          word = doc.getSelection();
        }
        if (doc.selection) {
          word = doc.selection.createRange().text;
        }
        return word.toString();
      };
      $('body').children().not('#dictMain').mousedown(function() {
        return $('#dictMain').hide();
      });
      this.each(function(index, element) {
        var dict;
        dict = new Dictionary(name, settings);
        return $(_this).mouseup(function(e) {
          var $container, left, offset, onSuccess, status, top, word, _ref, _ref1;
          word = getSelectWord(document);
          if (word.replace(/\s/g, "") === "") {
            return;
          }
          status = true;
          if (typeof settings.beforeTranslation === 'function') {
            status = settings.beforeTranslation.call(this);
          }
          if (status) {
            offset = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
            left = e.clientX;
            if (settings.left != null) {
              left += settings.left;
            }
            top = (_ref = e.clientY - 40 < 0) != null ? _ref : e.clientY + offset + {
              10: e.clientY + offset - 30
            };
            if (settings.top != null) {
              top += settings.top;
            }
            $container = $('#dictMain').length > 0 ? $('#dictMain') : $('<div id="dictMain"></div>').appendTo('body');
            $container.empty();
            $container.css('left', left).css('top', top).css('position', 'absolute');
            if (settings.loadingContainer) {
              $container.append($(settings.loadingContainer)).show();
            }
            onSuccess = (_ref1 = settings.onSuccess) != null ? _ref1 : function(result) {
              var $successContainer;
              $successContainer = $(settings.successContainer);
              $successContainer.children('#word').text(word);
              result = $.parseJSON(result);
              if (result.basic != null) {
                $successContainer.children('#phonetic').text(result.basic.phonetic);
                $.each(result.basic.explains, function(index, value) {
                  return $successContainer.children("#explains").append("<p>" + value + "</p>");
                });
              } else {
                $successContainer.children('#phonetic').hide();
                $.each(result.translation, function(index, value) {
                  return $successContainer.children("#explains").append("<p>" + value + "</p>");
                });
              }
              return $container.empty().append($successContainer.show()).show();
            };
            return dict.translate(word, onSuccess, settings.onFailure);
          }
        });
      });
      return this;
    }
  });

  exports = this;

  exports.Dictionary = Dictionary;

}).call(this);
